{
  "_from": "l",
  "_id": "l@0.6.0",
  "_inBundle": false,
  "_integrity": "sha1-HawOBirJTSmCf6zY0BZqpfGWxW8=",
  "_location": "/l",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "l",
    "fetchSpec": "latest",
    "name": "l",
    "raw": "l",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/l/-/l-0.6.0.tgz",
  "_shasum": "1dac0e062ac94d29827facd8d0166aa5f196c56f",
  "_spec": "l",
  "_where": "/home/hasanmdmehadi/Dropbox/bpp-github",
  "author": {
    "email": "arous.hasan@gmail.com",
    "name": "Hasan Arous",
    "url": "http://www.etabits.com/"
  },
  "bugs": {
    "url": "https://github.com/etabits/l/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Mix Async/Sync code with Promises and Streams in a reusable unified line",
  "devDependencies": {
    "ava": "^0.17.0",
    "coveralls": "^2.11.15",
    "jshint": "^2.9.4",
    "nyc": "^10.1.2",
    "standard": "^8.6.0"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/etabits/l#readme",
  "jshintConfig": {
    "asi": true,
    "esversion": 6,
    "node": true,
    "strict": true
  },
  "keywords": [
    "async",
    "control",
    "flow",
    "promise",
    "stream",
    "sync"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "l",
  "optionalDependencies": {},
  "readme": "# L\r\n> Mix Async/Sync code with Promises and Streams in a reusable unified line\r\n\r\n[![Build Status](https://travis-ci.org/etabits/l.svg?branch=master)](https://travis-ci.org/etabits/l)\r\n[![Coverage Status](https://coveralls.io/repos/github/etabits/l/badge.svg?branch=master)](https://coveralls.io/github/etabits/l?branch=master)\r\n\r\nYou have multiple functions, some of them are **async**, others are **promise**-based, and you have some **stream** transformers, and you want to plug everything together: This module **takes an array of functions/streams and gives you a single function**, that can be used with callback, or as a promise. It takes care of piping consecutive streams, buffering them before passing them to the next function... etc.\r\n\r\n## Installation\r\n```sh\r\nnpm install --save l\r\n```\r\n\r\n## Features\r\n* A segment can be sync, async with a callback, can return a promise, or can define a stream\r\n* Consecutive streams are automatically piped, only buffered when next segment is not a stream\r\n* You can return a stream, and it will be automatically buffered/piped\r\n\r\n## Usage Example\r\n```js\r\nconst l = require('l');\r\n\r\nvar calc = l([\r\n  (val) => val * 5, // sync\r\n  { // Split\r\n    add: (val) => Promise.resolve(val + 2), // promise\r\n    mul: (val, done) => process.nextTick(() => done(null, val * 7)) // async\r\n  },\r\n  (composed) => composed.add + composed.mul // Join\r\n])\r\n\r\ncalc(1, function (error, answer) { // with a callback\r\n  require('assert').strictEqual(answer, 42)\r\n})\r\n\r\ncalc(Math.PI).then(result => { // as a promise\r\n  console.log(result) // 127.66370614359172\r\n})\r\n```\r\nFor a more complete example that involves streams, please check [examples](https://github.com/etabits/l/tree/master/examples) and [tests](https://github.com/etabits/l/tree/master/test).\r\n\r\n## Debugging\r\nTo enable debugging:\r\n```sh\r\nDEBUG=line node ./examples/npm-module-github-stats.js penguin\r\n```\r\n<!--- I mark it as ruby because colors look nice -->\r\n```ruby\r\n>executing on: penguin (5 segments)\r\n   0 <async IncomingMessage {   _readableState: [Object],   readable: true,...\r\n   1 @consuming readable stream...\r\n   1 <sync { _id: 'penguin',   _rev: '151-868f4a334cf6a0bc8ced2f4485e7da78',   name: 'penguin',...\r\n   2 <promise etabits/node-penguin\r\n   3 <async IncomingMessage {   _readableState: [Object],   readable: true,...\r\n   4 @consuming readable stream...\r\n   4 <sync { gh: [Object],   npm: [Object] }...\r\n<finished with { gh: [Object],   npm: [Object] }...\r\n```\r\n\r\n## Running tests\r\n```sh\r\nnpm test\r\n```\r\n\r\n## Compatibility\r\n* L is compatible with [Node.js v6 LTS](https://nodejs.org/en/download/), [Node.js v7 Current](https://nodejs.org/en/download/current/), Node.js v5 and Node.js v4\r\n\r\n## Next (Roadmap)\r\n* Ability to split and rejoin a stream (parallel execution)\r\n* Return a readable stream when last element is a stream (optional)\r\n* Syntactic sugar, once uses cases are established, so we have a stable API\r\n* Browser use?\r\n* objectMode streams between segments\r\n* create objectMode stream duplex instead of a function wrapper\r\n* ...\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/etabits/l.git"
  },
  "scripts": {
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "pretest": "standard --verbose && jshint --verbose --exclude-path .gitignore .",
    "test": "nyc ava"
  },
  "version": "0.6.0"
}
